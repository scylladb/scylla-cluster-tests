# TODO: need to qualify on GCE and AWS

test_duration: 300

# workloads
write_stress_during_entire_test: cassandra-stress write no-warmup cl=QUORUM n=20100200 -schema 'keyspace=keyspace_entire_test replication(strategy=NetworkTopologyStrategy,replication_factor=3) compression=LZ4Compressor compaction(strategy=SizeTieredCompactionStrategy)' -mode cql3 native compression=lz4 -rate threads=100 -pop seq=1..20100200 -log interval=5
verify_stress_after_cluster_upgrade: cassandra-stress read no-warmup cl=ONE n=20100200 -schema 'keyspace=keyspace_entire_test replication(strategy=NetworkTopologyStrategy,replication_factor=3) compression=LZ4Compressor' -mode cql3 native compression=lz4 -rate threads=1000 -pop seq=1..20100200 -log interval=5
prepare_write_stress: cassandra-stress write no-warmup cl=QUORUM n=10100200 -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compression=LZ4Compressor compaction(strategy=LeveledCompactionStrategy)' -mode cql3 native compression=lz4 -rate threads=1000 -pop seq=1..10100200 -log interval=5
stress_cmd_read_cl_quorum: cassandra-stress read no-warmup cl=QUORUM n=10100200 -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compression=DeflateCompressor' -mode cql3 native compression=none -rate threads=1000 -pop seq=1..10100200 -log interval=5
stress_cmd_read_10m: cassandra-stress read no-warmup cl=QUORUM duration=10m -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compression=SnappyCompressor' -mode cql3 native compression=snappy -rate threads=1000 -pop seq=1..10100200 -log interval=5
stress_cmd_read_60m: cassandra-stress read no-warmup cl=QUORUM duration=60m -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compression=LZ4Compressor' -mode cql3 native compression=lz4 -rate threads=1000 -pop seq=1..10100200 -log interval=5
stress_cmd_complex_prepare: cassandra-stress user no-warmup profile=/tmp/complex_schema.yaml  ops'(insert=1)' cl=ALL n=5000000 -mode cql3 native -rate threads=1000 -pop seq=1..5000000
stress_cmd_complex_verify_read: cassandra-stress user no-warmup profile=/tmp/complex_schema.yaml  ops'(read1=1,read3=1)' cl=ONE n=5000000 -mode cql3 native -rate threads=1000 -pop seq=1..5000000
stress_cmd_complex_verify_more: cassandra-stress user no-warmup profile=/tmp/complex_schema.yaml  ops'(read1=1,read2=1,read3=1,update_static=1,update_ttl=1,update_diff1_ts=1,update_diff2_ts=1,update_same1_ts=1,update_same2_ts=1)' cl=ALL n=5000000 -mode cql3 native -rate threads=200 -pop seq=1..5000000
stress_cmd_complex_verify_delete: cassandra-stress user no-warmup profile=/tmp/complex_schema.yaml  ops'(delete_row=1)' cl=ALL n=500000 -mode cql3 native -rate threads=200 -pop seq=1..500000
stress_before_upgrade: scylla-bench -workload=sequential -mode=write -replication-factor=3 -partition-count=800 -clustering-row-count=5555 -clustering-row-size=uniform:100..1024 -concurrency=5 -connection-count=5 -consistency-level=quorum -rows-per-request=10 -timeout=30s -validate-data
stress_after_cluster_upgrade: scylla-bench -workload=sequential -mode=read -replication-factor=3 -partition-count=800 -clustering-row-count=5555 -clustering-row-size=uniform:100..1024 -concurrency=20 -connection-count=20 -consistency-level=one -rows-per-request=100 -timeout=30s -validate-data

n_db_nodes: 4
n_loaders: 1
n_monitor_nodes: 1

instance_type_db: 'i4i.2xlarge'

user_prefix: 'rolling-upgrade'

server_encrypt: true
authenticator: 'PasswordAuthenticator'
authenticator_user: 'cassandra'
authenticator_password: 'cassandra'

# those are needed to be give by the job, via environment variable
# for the base version
# SCT_SCYLLA_VERSION=3.0 or SCT_SCYLLA_REPO=
# for the upgrading version you need:
# SCT_NEW_SCYLLA_REPO=https://s3.amazonaws.com/downloads.scylladb.com/enterprise/rpm/unstable/centos/e438e3e3ce41f6c878b111f5c19bf2b28aa51098-2bdfa9f7ef592edaf15e028faf3b7f695f39ebc1-e616363bdc0e7a0d193a157851d7c15d952a0aad-a6b2b2355c666b1893f702a587287da978aeec22/53/scylla.repo

use_mgmt: false

gemini_cmd: |
  --duration 2h
  --concurrency 10
  --mode write
  --cql-features normal
  --max-mutation-retries 5
  --max-mutation-retries-backoff 500ms
  --async-objects-stabilization-attempts 5
  --async-objects-stabilization-backoff 500ms

gemini_table_options:
  - "cdc={'enabled': true}"

gemini_schema_url: 'https://s3.amazonaws.com/scylla-gemini/Binaries/schema.json' # currently is not used

scylla_network_config:
- address: listen_address  # Address Scylla listens for connections from other nodes. See storage_port and ssl_storage_ports.
  ip_type: ipv4
  public: false
  listen_all: false  # Should be True when multiple interfaces - Scylla should be listening on all interfaces
  use_dns: false
  nic: 0
- address: rpc_address  # Address on which Scylla is going to expect Thrift and CQL client connections.
  ip_type: ipv4
  public: false
  listen_all: false  # Should be True when multiple interfaces - Scylla should be listening on all interfaces
  use_dns: false
  nic: 0
- address: broadcast_rpc_address  # Address that is broadcasted to tell the clients to connect to. Related to rpc_address.
  ip_type: ipv4
  public: false  # Should be False when multiple interfaces
  use_dns: false
  nic: 0
- address: broadcast_address  # Address that is broadcasted to tell other Scylla nodes to connect to. Related to listen_address above.
  ip_type: ipv4
  public: false  # Should be False when multiple interfaces
  use_dns: false
  nic: 0  #  If ipv4 and public is True it has to be primary network interface (device index is 0)
- address: test_communication  # Type of IP used to connect to machine instances
  ip_type: ipv4
  public: false
  use_dns: false
  nic: 0  #  If ipv4 and public is True it has to be primary network interface (device index is 0)
