from datetime import datetime, timezone

import pytest

from sdcm.utils.validators.anomalies_detection import detect_isolation_forest_anomalies, bytes_to_readable


def test_empty_memory_data_raises():
    """Test that passing an empty list raises a ValueError."""
    with pytest.raises(ValueError):
        detect_isolation_forest_anomalies([])


def test_detects_anomalies():
    """Test that clear outliers in the data are detected as anomalies."""
    # Create a dataset with clear outliers
    memory_data = [
        [1750769370.67, "26607616"],
        [1750769390.67, "26607616"],
        [1750769410.67, "26607616"],
        [1750769430.67, "26607616"],
        [1750769450.67, "26607616"],
        [1750769470.67, "29491200"],
        [1750769490.67, "3144941568"],
        [1750769510.67, "9392226304"],
        [1750769530.67, "16581263360"],
        [1750769550.67, "21986410496"],
        [1750769570.67, "27136229376"],
        [1750769590.67, "32266256384"],
        [1750769610.67, "38354026496"],
        [1750769630.67, "44865552384"],
        [1750769650.67, "51335135232"],
        [1750769670.67, "57909706752"],
        [1750769690.67, "64279281664"],
        [1750769710.67, "70925942784"],
        [1750769730.67, "76653133824"],
        [1750769750.67, "83024412672"],
        [1750769770.67, "89503956992"],
        [1750769790.67, "95630786560"],
        [1750769810.67, "101534531584"],
        [1750769830.67, "107669094400"],
        [1750769850.67, "114080219136"],
        [1750769870.67, "118617800704"],
        [1750769890.67, "119513153536"],
        [1750769910.67, "119541596160"],
        [1750769930.67, "119541334016"],
        [1750769950.67, "119530323968"],
        [1750769970.67, "119528620032"],
        [1750769990.67, "119529668608"],
        [1750770010.67, "119533993984"],
        [1750770030.67, "119534780416"],
        [1750770050.67, "119537532928"],
        [1750770070.67, "119539105792"],
        [1750770090.67, "119532027904"],
        [1750770110.67, "119527702528"],
        [1750770130.67, "119522983936"],
        [1750770150.67, "119525081088"],
        [1750770170.67, "119519182848"],
        [1750770190.67, "119519313920"],
        [1750770210.67, "119511056384"],
        [1750770230.67, "119513939968"],
        [1750770250.67, "119513546752"],
        [1750770270.67, "119502143488"],
        [1750770290.67, "119506206720"],
        [1750770310.67, "119505813504"],
        [1750770330.67, "119500570624"],
        [1750770350.67, "119489298432"],
        [1750770370.67, "119497424896"],
        [1750770390.67, "119492968448"],
        [1750770410.67, "119489429504"],
        [1750770430.67, "119484055552"],
        [1750770450.67, "119485104128"],
        [1750770470.67, "119489167360"],
        [1750770490.67, "119485628416"],
        [1750770510.67, "119476453376"],
        [1750770530.67, "119485104128"],
        [1750770550.67, "118597353472"],
        [1750770570.67, "118979297280"],
        [1750770590.67, "119432151040"],
        [1750770610.67, "119446962176"],
        [1750770630.67, "119447093248"],
        [1750770650.67, "119440408576"],
        [1750770670.67, "119444733952"],
        [1750770690.67, "119445389312"],
        [1750770710.67, "119445913600"],
        [1750770730.67, "119447748608"],
        [1750770750.67, "119446831104"],
        [1750770770.67, "119440277504"],
        [1750770790.67, "119440277504"],
        [1750770810.67, "119437524992"],
        [1750770830.67, "119441063936"],
        [1750770850.67, "119442374656"],
        [1750770870.67, "119436476416"],
        [1750770890.67, "119442898944"],
        [1750770910.67, "119421534208"],
        [1750770930.67, "119399776256"],
        [1750770950.67, "119371726848"],
        [1750770970.67, "115949043712"],
        [1750770990.67, "112355442688"],
        [1750771010.67, "107895848960"],
        [1750771030.67, "104695070720"],
        [1750771050.67, "101158748160"],
        [1750771070.67, "97206272000"],
        [1750771090.67, "94503567360"],
        [1750771110.67, "91984887808"],
        [1750771130.67, "90078576640"],
        [1750771150.67, "87767908352"],
        [1750771170.67, "90178322432"],
        [1750771190.67, "93045129216"],
        [1750771210.67, "96197017600"],
        [1750771230.67, "99442491392"],
        [1750771250.67, "102691504128"],
        [1750771270.67, "105850208256"],
        [1750771290.67, "109033553920"],
        [1750771310.67, "112371695616"],
        [1750771330.67, "115068502016"],
        [1750771350.67, "116922384384"],
        [1750771370.67, "118313582592"],
        [1750771390.67, "118858579968"],
        [1750771410.67, "119319691264"],
        [1750771430.67, "119347347456"],
        [1750771450.67, "119335550976"],
        [1750771470.67, "119351541760"],
        [1750771490.67, "119355867136"],
        [1750771510.67, "119361110016"],
        [1750771530.67, "119357440000"],
        [1750771550.67, "119358488576"],
        [1750771570.67, "119355473920"],
        [1750771590.67, "119357702144"],
        [1750771610.67, "119362551808"],
        [1750771630.67, "119354949632"],
        [1750771650.67, "119358881792"],
        [1750771670.67, "119362027520"],
        [1750771690.67, "119362682880"],
        [1750771710.67, "119361896448"],
        [1750771730.67, "119365828608"],
        [1750771750.67, "119364648960"],
        [1750771770.67, "119364386816"],
        [1750771790.67, "119364648960"],
        [1750771810.67, "119365566464"],
        [1750771830.67, "119363076096"],
        [1750771850.67, "119364517888"],
        [1750771870.67, "119365042176"],
        [1750771890.67, "119363731456"],
        [1750771910.67, "119369760768"],
        [1750771930.67, "118189981696"],
        [1750771950.67, "112326344704"],
        [1750771970.67, "106699554816"],
        [1750771990.67, "107935694848"],
        [1750772010.67, "109432799232"],
        [1750772030.67, "110960312320"],
        [1750772050.67, "112407085056"],
        [1750772070.67, "110551629824"],
        [1750772090.67, "112437624832"],
        [1750772110.67, "114323619840"],
        [1750772130.67, "116098465792"],
        [1750772150.67, "117572632576"],
        [1750772170.67, "118430760960"],
        [1750772190.67, "118861332480"],
        [1750772210.67, "119168696320"],
        [1750772230.67, "119340924928"],
        [1750772250.67, "119347085312"],
        [1750772270.67, "119346561024"],
        [1750772290.67, "119348133888"],
        [1750772310.67, "119344201728"],
        [1750772330.67, "119345381376"],
        [1750772350.67, "119345905664"],
        [1750772370.67, "119236329472"],
        [1750772390.67, "119060037632"],
        [1750772410.67, "119341580288"],
        [1750772430.67, "119141433344"],
        [1750772450.67, "118919790592"],
        [1750772470.67, "119239213056"],
        [1750772490.67, "119343153152"],
        [1750772510.67, "119342497792"],
        [1750772530.67, "119343284224"],
        [1750772550.67, "119347216384"],
        [1750772570.67, "119346561024"],
        [1750772590.67, "119349706752"],
        [1750772610.67, "119352066048"],
        [1750772630.67, "119350755328"],
        [1750772650.67, "119349444608"],
        [1750772670.67, "119349313536"],
        [1750772690.67, "119353507840"],
        [1750772710.67, "119353769984"],
        [1750772730.67, "119352328192"],
        [1750772750.67, "119351803904"],
        [1750772770.67, "119352852480"],
        [1750772790.67, "119350755328"],
        [1750772810.67, "119355342848"],
        [1750772830.67, "119347871744"],
        [1750772850.67, "119354687488"],
        [1750772870.67, "119351541760"],
        [1750772890.67, "119353769984"],
        [1750772910.67, "119355473920"],
        [1750772930.67, "119353901056"],
        [1750772950.67, "119350886400"],
        [1750772970.67, "119352328192"],
        [1750772990.67, "119354949632"],
        [1750773010.67, "119354294272"],
        [1750773030.67, "119354163200"],
        [1750773050.67, "119338696704"],
        [1750773070.67, "119353245696"],
        [1750773090.67, "119353114624"],
        [1750773110.67, "119356260352"],
        [1750773130.67, "119341973504"],
        [1750773150.67, "119344201728"],
        [1750773170.67, "119346954240"],
        [1750773190.67, "119348133888"],
        [1750773210.67, "119344070656"],
        [1750773230.67, "119348920320"],
        [1750773250.67, "119347216384"],
        [1750773270.67, "119349313536"],
        [1750773290.67, "119319166976"],
        [1750773310.67, "119348396032"],
        [1750773330.67, "119347216384"],
        [1750773350.67, "119350493184"],
        [1750773370.67, "119347478528"],
        [1750773390.67, "119347871744"],
        [1750773410.67, "119346692096"],
        [1750773430.67, "119348920320"],
        [1750773450.67, "119346823168"],
        [1750773470.67, "119348002816"],
        [1750773490.67, "119349444608"],
        [1750773510.67, "119348264960"],
        [1750773530.67, "119351017472"],
        [1750773550.67, "119346036736"],
        [1750773570.67, "119351017472"],
        [1750773590.67, "119350886400"],
        [1750773610.67, "119343939584"],
        [1750773630.67, "119349051392"],
        [1750773650.67, "119346954240"],
        [1750773670.67, "119349444608"],
        [1750773690.67, "119212474368"],
        [1750773710.67, "119120199680"],
        [1750773730.67, "119066066944"],
        [1750773750.67, "119119151104"],
        [1750773770.67, "119141564416"],
        [1750773790.67, "119287054336"],
        [1750773810.67, "119323885568"],
        [1750773830.67, "119311040512"],
        [1750773850.67, "119273291776"],
        [1750773870.67, "119355080704"],
        [1750773890.67, "119359275008"],
        [1750773910.67, "119313793024"],
        [1750773930.67, "119333453824"],
        [1750773950.67, "119353901056"],
        [1750773970.67, "119350755328"],
        [1750773990.67, "119354556416"],
        [1750774010.67, "119351410688"],
        [1750774030.67, "119354818560"],
        [1750774050.67, "119352590336"],
        [1750774070.67, "119346954240"],
        [1750774090.67, "119351410688"],
        [1750774110.67, "119352328192"],
        [1750774130.67, "119355604992"],
        [1750774150.67, "119353114624"],
        [1750774170.67, "119354818560"],
        [1750774190.67, "119355080704"],
        [1750774210.67, "119353245696"],
        [1750774230.67, "119350755328"],
        [1750774250.67, "119356653568"],
        [1750774270.67, "119357964288"],
        [1750774290.67, "119353769984"],
        [1750774310.67, "119355998208"],
        [1750774330.67, "119354294272"],
        [1750774350.67, "119354425344"],
        [1750774370.67, "119355342848"],
        [1750774390.67, "119359275008"],
        [1750774410.67, "119355998208"],
        [1750774430.67, "119358226432"],
        [1750774450.67, "119360716800"],
        [1750774470.67, "119356129280"],
        [1750774490.67, "119358488576"],
        [1750774510.67, "119359930368"],
        [1750774530.67, "119359537152"],
        [1750774550.67, "119362420736"],
        [1750774570.67, "119355867136"],
        [1750774590.67, "119361241088"],
        [1750774610.67, "119360978944"],
        [1750774630.67, "119358488576"],
        [1750774650.67, "118094036992"],
        [1750774670.67, "119162011648"],
        [1750774690.67, "119356522496"],
        [1750774710.67, "119351672832"],
        [1750774730.67, "119348264960"],
        [1750774750.67, "119251009536"],
        [1750774770.67, "119366877184"],
        [1750774790.67, "119366615040"],
        [1750774810.67, "119364780032"],
        [1750774830.67, "119360716800"],
        [1750774850.67, "119359143936"],
        [1750774870.67, "119356915712"],
        [1750774890.67, "119351672832"],
        [1750774910.67, "119348002816"],
        [1750774930.67, "119343022080"],
        [1750774950.67, "119343808512"],
        [1750774970.67, "119242620928"],
        [1750774990.67, "119346823168"],
        [1750775010.67, "119370940416"],
        [1750775030.67, "119360323584"],
        [1750775050.67, "118885842944"],
        [1750775070.67, "119011016704"],
        [1750775090.67, "119119806464"],
        [1750775110.67, "119330570240"],
        [1750775130.67, "119321264128"],
        [1750775150.67, "118602203136"],
        [1750775170.67, "118851502080"],
        [1750775190.67, "119211687936"],
        [1750775210.67, "119302520832"],
        [1750775230.67, "118871162880"],
        [1750775250.67, "119220469760"],
        [1750775270.67, "119309205504"],
        [1750775290.67, "119321788416"],
        [1750775310.67, "119317987328"],
        [1750775330.67, "119314710528"],
        [1750775350.67, "119308943360"],
        [1750775370.67, "119300030464"],
        [1750775390.67, "119290593280"],
        [1750775410.67, "119294656512"],
        [1750775430.67, "119290331136"],
        [1750775450.67, "119296884736"],
        [1750775470.67, "119297015808"],
        [1750775490.67, "119294394368"],
        [1750775510.67, "119291510784"],
        [1750775530.67, "119291117568"],
        [1750775550.67, "119298850816"],
        [1750775570.67, "119295442944"],
        [1750775590.67, "119289413632"],
        [1750775610.67, "119289937920"],
        [1750775630.67, "119294132224"],
        [1750775650.67, "119289151488"],
        [1750775670.67, "119294132224"],
        [1750775690.67, "119287840768"],
        [1750775710.67, "119294525440"],
        [1750775730.67, "119290200064"],
        [1750775750.67, "119295574016"],
        [1750775770.67, "119292035072"],
        [1750775790.67, "119290986496"],
        [1750775810.67, "119292297216"],
        [1750775830.67, "119291641856"],
        [1750775850.67, "119295836160"],
        [1750775870.67, "119291379712"],
        [1750775890.67, "119297409024"],
        [1750775910.67, "119290462208"],
        [1750775930.67, "119295311872"],
        [1750775950.67, "119298981888"],
        [1750775970.67, "119294132224"],
        [1750775990.67, "119290593280"],
        [1750776010.67, "119295311872"],
        [1750776030.67, "119292166144"],
        [1750776050.67, "119299244032"],
        [1750776070.67, "119289675776"],
        [1750776090.67, "119295967232"],
        [1750776110.67, "119283908608"],
        [1750776130.67, "119276830720"],
        [1750776150.67, "119106961408"],
        [1750776170.67, "119296884736"],
        [1750776190.67, "119300554752"],
        [1750776210.67, "118811394048"],
        [1750776230.67, "118774824960"],
        [1750776250.67, "118877061120"],
        [1750776270.67, "118798155776"],
        [1750776290.67, "118820831232"],
        [1750776310.67, "118834069504"],
        [1750776330.67, "118898819072"],
        [1750776350.67, "118488432640"],
        [1750776370.67, "118787407872"],
        [1750776390.67, "119201071104"],
        [1750776410.67, "119238426624"],
        [1750776430.67, "119274733568"],
        [1750776450.67, "119277617152"],
        [1750776470.67, "119280369664"],
        [1750776490.67, "119155326976"],
        [1750776510.67, "119162273792"],
        [1750776530.67, "119289937920"],
        [1750776550.67, "119184687104"],
        [1750776570.67, "119283384320"],
        [1750776590.67, "119106568192"],
        [1750776610.67, "119285219328"],
        [1750776630.67, "119285219328"],
        [1750776650.67, "119283646464"],
        [1750776670.67, "119278010368"],
        [1750776690.67, "119274864640"],
        [1750776710.67, "119295967232"],
        [1750776730.67, "119303831552"],
        [1750776750.67, "119306977280"],
        [1750776770.67, "119302520832"],
        [1750776790.67, "119309336576"],
        [1750776810.67, "119308156928"],
        [1750776830.67, "119308288000"],
        [1750776850.67, "119302520832"],
        [1750776870.67, "119308025856"],
        [1750776890.67, "119307763712"],
        [1750776910.67, "119305011200"],
        [1750776930.67, "119304749056"],
        [1750776950.67, "119309205504"],
        [1750776970.67, "119306977280"],
        [1750776990.67, "119310516224"],
        [1750777010.67, "119308812288"],
        [1750777030.67, "119309205504"],
        [1750777050.67, "119305011200"],
        [1750777070.67, "119302651904"],
        [1750777090.67, "119302651904"],
        [1750777110.67, "119305535488"],
        [1750777130.67, "119306584064"],
        [1750777150.67, "119331356672"],
        [1750777170.67, "119185080320"],
        [1750777190.67, "117595176960"],
        [1750777210.67, "117185052672"],
        [1750777230.67, "118178185216"],
        [1750777250.67, "118890823680"],
        [1750777270.67, "119197138944"],
        [1750777290.67, "119126491136"],
        [1750777310.67, "118680977408"],
        [1750777330.67, "119173939200"],
        [1750777350.67, "119280369664"],
        [1750777370.67, "119286661120"],
        [1750777390.67, "119281549312"],
        [1750777410.67, "119284563968"],
        [1750777430.67, "119285612544"],
        [1750777450.67, "119285874688"],
        [1750777470.67, "119284957184"],
        [1750777490.67, "119284957184"],
        [1750777510.67, "119286530048"],
        [1750777530.67, "119283908608"],
        [1750777550.67, "119285612544"],
        [1750777570.67, "119278796800"],
        [1750777590.67, "119281680384"],
        [1750777610.67, "119278272512"],
        [1750777630.67, "119281287168"],
        [1750777650.67, "119287447552"],
        [1750777670.67, "119283646464"],
        [1750777690.67, "119284301824"],
        [1750777710.67, "119280500736"],
        [1750777730.67, "119285088256"],
        [1750777750.67, "119286398976"],
    ]
    anomalies = detect_isolation_forest_anomalies(
        memory_data, contamination=0.10, filter_score=0.70, deviation_threshold=0.20, ignore_first_minutes=10)

    assert len(anomalies) == 4
    assert all(a[2] == "low" for a in anomalies), "All detected anomalies should be classified as 'low'"

    event_message = "Memory usage anomalies detected for xxx on node bbb:\n"
    for index, (timestamp, value), kind, score in anomalies:
        formatted_timestamp = datetime.fromtimestamp(timestamp, tz=timezone.utc).strftime("%Y-%m-%dT%H:%M:%S")
        line = f" - At {index}: {formatted_timestamp} - {bytes_to_readable(value)} ({kind} - score: {score})"
        event_message += line + "\n"

    print(event_message)


def test_no_anomalies():
    """Test that no anomalies are detected in a uniform dataset."""
    memory_data = [(i, 10) for i in range(20)]
    anomalies = detect_isolation_forest_anomalies(memory_data, contamination=0.1, filter_score=0.99)
    assert anomalies == []


def test_anomalies_with_gradual_and_sharp_changes():
    """Test that only sharp deviations are detected as anomalies with a rolling window."""
    # Simulate 30 minutes of data, 1 point per minute, mostly stable, with two sharp spikes
    base = 10000
    memory_data = []
    for i in range(30):
        ts = 1750323600 + i * 60  # 1 minute apart
        val = base
        if i == 10:
            val = int(base * 1.20)  # 20% spike (increase magnitude)
        if i == 20:
            val = int(base * 0.80)  # 20% drop (increase magnitude)
        memory_data.append((ts, str(val)))
    # Lower deviation threshold to 0.04 for more sensitivity
    anomalies = detect_isolation_forest_anomalies(
        memory_data, window_seconds=600, deviation_threshold=0.04, filter_score=0.5, contamination=0.2)
    assert len(anomalies) >= 1
    assert any(a[1][0] == memory_data[10][0] for a in anomalies)
    assert any(a[1][0] == memory_data[20][0] for a in anomalies)


def test_anomalies_with_high_deviation_threshold():
    """Test that a higher deviation threshold suppresses smaller anomalies."""
    base = 10000
    memory_data = []
    for i in range(15):
        ts = 1750327200 + i * 60
        val = base
        if i == 7:
            val = int(base * 1.06)  # 6% spike
        memory_data.append((ts, str(val)))
    # With 10% threshold, the 6% spike should not be detected
    anomalies = detect_isolation_forest_anomalies(
        memory_data, window_seconds=600, deviation_threshold=0.10, filter_score=0.5, contamination=0.2)
    assert len(anomalies) == 0
    # With 5% threshold, the 6% spike should be detected
    anomalies = detect_isolation_forest_anomalies(
        memory_data, window_seconds=600, deviation_threshold=0.05, filter_score=0.5, contamination=0.2)
    assert any(a[1][0] == memory_data[7][0] for a in anomalies)


def test_anomalies_with_small_time_window():
    """Test that a small time window only considers recent points for deviation."""
    base = 10000
    memory_data = []
    for i in range(20):
        ts = 1750330000 + i * 60
        val = base
        if i == 5:
            val = int(base * 1.20)  # 20% spike
        memory_data.append((ts, str(val)))
    # Lower filter_score and contamination for more sensitivity
    anomalies = detect_isolation_forest_anomalies(
        memory_data, window_seconds=60, deviation_threshold=0.10, filter_score=0.5, contamination=0.2)
    assert any(a[1][0] == memory_data[5][0] for a in anomalies)
