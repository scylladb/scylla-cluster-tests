test_duration: 1500

prepare_write_cmd:  ["cassandra-stress write cl=QUORUM n=500000000 -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compaction(strategy=SizeTieredCompactionStrategy)' -mode cql3 native -rate threads=600 -pop seq=1..500000000 -log interval=5"]

# This is the main stress thread that will run with default role (cassandra)
stress_cmd: ["cassandra-stress read cl=QUORUM duration=1380m -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compaction(strategy=SizeTieredCompactionStrategy)' -mode cql3 native -rate threads=100 -pop seq=1..250000000 -log interval=5 -errors retries=50",
             "cassandra-stress read cl=QUORUM duration=1380m -schema 'replication(strategy=NetworkTopologyStrategy,replication_factor=3) compaction(strategy=SizeTieredCompactionStrategy)' -mode cql3 native -rate threads=100 -pop seq=250000001..500000000 -log interval=5 -errors retries=50"
             ]

n_db_nodes: 6
n_loaders: 2
round_robin: true

sla: true

instance_type_db: 'i3.2xlarge'
instance_type_loader: 'c5.2xlarge'

run_fullscan: ['{"mode": "random", "ks_cf": "keyspace1.standard1", "interval": 5}'] # 'ks.cf|random, interval(min)'
nemesis_class_name: 'SisyphusMonkey:1 SisyphusMonkey:1'
# There are SLA nemeses that uses binary disable/enable workaround that in a test with parallel nemeses can cause to the errors and
# failures that is not a problem of Scylla. The option "!disruptive" is added to prevent irrelevant failures.
nemesis_selector: ['sla and not disruptive', 'not sla']
nemesis_during_prepare: false

stop_test_on_stress_failure: false

user_prefix: 'longevity-sla-system-24h'
space_node_threshold: 64424

authenticator: 'PasswordAuthenticator'
authenticator_user: cassandra
authenticator_password: cassandra
authorizer: 'CassandraAuthorizer'
